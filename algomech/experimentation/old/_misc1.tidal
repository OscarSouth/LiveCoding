hush'

p "transport" $ do
  let out = 8*1000
  let
  seqP [sync, startTransport, stopTransport out
    ,bar 0 out metronome
    ]

runWith adagio

stopTransportNow


d2 $ fast 2 $ do
  stack[silence
    ,stut 4 0.6 0.125 $ midinote "49"
    -- ,degrade $ 0.5 <~ (stut 8 0.6 0.125 $ midinote "58")
    -- ,fast 2 $ midinote "58 58 61 58" |+ (slow 2 $ vel "5 0 9 0")
    ,midinote "~ 54"
    -- ,fast 2 $ midinote "~ ?61" #vel 6
    -- ,fast 2 $ midinote "51"
    ] #ch 9

click 0

once startTransport'

once stopTransport'

d9 $ fast 4 $ midinote "[[51,61]/4,[~ 58]]" #ch 9

hush


gainScale n =
  let e = 100
      pwr = n * (e**1.26 - e**0.375) + e**0.375
   in (pwr - e**0.375) / (e**1.26 - e**0.375) * (1.26 - 0.375) + 0.375

let vel n = gain $ gainScale n

(gainScale 1 - gainScale 0.5, gainScale 0.5 - gainScale 0)


gainScale n =
  let e = 100
      pwr = n * (e**1.26 - e**0.375) + e**0.375
   in (pwr - e**0.375) / (e**1.26 - e**0.375) * (1.26 - 0.375) + 0.375

   Result := ((Input - InputLow) / (InputHigh - InputLow))
             * (OutputHigh - OutputLow) + OutputLow;

gainScale' n = ((n-0) / (1-0)) * (1.26-0.375)+0.375

gainScale' 0.5

gainScale 0.5

tst = (/10) <$> [0..10]
e = 2.7182818284590452353602874713527

b = log (1.26/0.375) / (1-0)

b = log (10/0.1) / (10-0.1)

10 / exp (b*10)

a
b

tst = (/10) <$> [0..10]

tst


gainScale n =
  -- | n == 0 = 0.375
  -- | otherwise =
  let (x0, x1, y0, y1) = (0.001, 1, 0.375, 1.26)
      scale = logBase 7
   in y0 + (log n - scale x0) / (log x1 - scale x0) * (y1 - y0)

gainScale 0.5

gainScale <$> tst

let vel n = gain $ gainScale n

d1 $ do
  stack [silence
    ,fast 2 $ kick "0" #vel 0.5
    -- ,fast 2 $ snare "~ 0" #vel 0.5
    ,fast 8 $ hclosed "0" #vel 0.1 |+ humanise (slow 4 $ lfo sine 0 1)
    ] |+ vel 0.3

hush

runWith adagio

let modelD = cc' 6 1
let voyager = cc' 6 2
let laplace = cc' 6 3
let mersenne = cc' 6 4
let wurlitz = cc' 6 5
let piano = cc' 6 (6*2)
let rhythm n = stack[(cc' 6 7 n), (cc' 9 "[33, 41, 49, 57, 66, 74, 82]" n)]
let slicer = cc' 6 8
let overtones = cc' 6 9
let samplr = cc' 6 10
let clicktrack v = asap $ cc' 9 90 v
