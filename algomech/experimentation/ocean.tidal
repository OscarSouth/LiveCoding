-- OCEAN

runWith adagio

keySig = Eb \\\ aeolian

p08 p0 p1 p2 = d08 $ do
  let (motion, prog) = (snd p0, inKey p1)
  id $
    stack [silence
      ,phrase 1 "mp"
      -- ,phrase 1 "mp:."
      ,modwheel 0.0
      -- ,modwheel $ fast 3 $ lfo sine 0 1
      ] |* vel p2 #ch 08
        |+ note 12
        |+| prog 4 (fst motion
         -- +| "[0]*64"
         +| "[0 4 9 4]*16"
          ) |+ note (snd motion)
      -- >> silence

p09 p0 = d09 $ do
  id $
    stack [silence
      ,ruismk 1 "bd"
      -- ,ruismk crotchet "sb"
      -- ,ruismk crotchet "[~ sn]"
      -- ,ruismk minim "[~ sn]"
      ,ruismk minim "[~ cp]"
      -- ,ruismk minim "~ hh"
      -- ,ruismk 1 "hats"
      ] |* vel p0 #ch 09
        -- >> silence

p10 p0 = d10 $ do
  id $
    stack [silence
      ,on4 (pullBy semiquaver) $ hats crotchet "~ <c c c:echoq c>"
      ,kit 1 "[bd bd:echo, ~!7 bd]"
      ,kit minim "~ <sn [sn ~ ~ sn]>"
      ,cymbals 8 "cr ~ ~ ~ ~ ~ ~ ~" |= vel "0.2 0.8"
      ] |* vel p0 #ch 10
        |* vel "1.1 0.9!15"
        |+ vel 0.2
        |+ humanise 0.2
        -- >> silence

p11 p0 p1 p2 = d11 $ do
  let (motion, prog) = (fst p0, inKey p1)
  id $
    stack [silence
      ,phrase 1 "mp"
      ,modwheel 0.4
      ] |* vel p2 #ch 11
        |+ note 12
        |+| prog 4 (fst motion
         -- +| ""
          ) |+ note (snd motion)
      -- >> silence

p12 p0 p1 p2 = d12 $ do
  let (motion, prog) = (fst p0, inKey p1)
  let lfo1 = slow 5 $ 0.5 <~ lfo sine 0.01 0.11
  id $
    stack [silence
      ,phrase 1 "mp"
      ,modwheel (slow 2 $ 3 <~ lfo1 * 9)
      ,dBrightLead
        (lfo sine 0.4 0.6) -- cutoff
        0.4 -- res
        (2 <~ lfo1*2) -- contour
        (lfo1 *1) -- osc2&3
        "0" -- oscmod
        (lfo1*0.1) -- lfo
      ] |* vel p2 #ch 12
        |+ vel 0.1
        |+ note 12
        |+| prog 4 (fst motion
         -- +| "[0 4 9 4]*16"
         -- +| "[4 0]!8 [5 0]!4 [4 <2 0>]!4"
         -- +| "[0 9]*32"
         -- +| "[0 12]*32"
          ) |+ note (snd motion)
      -- >> silence

p14 p0 p1 p2 = d14 $ do
  let (motion, prog) = (snd p0, inKey p1)
  id $
    stack [silence
      ,phrase 1 "mp"
      ,toneA 0.5 0.7 1
      ,toneB 0.8 0.45 1
      ] |* vel p2 #ch 14
        |- note 12
        |* vel (slow 16 $ lfo saw 0.3 0.9)
        |+ humanise 0.3
        |+| prog 4 (fst motion
         +| "[0 4 9 4]*16"
          ) |+ note (snd motion)
      -- >> silence

p15 p0 p1 p2 = d15 $ do
  let (motion, prog) = (snd p0, inKey p1)
  id $
    stack [silence
      ,phrase 1 "mp"
      ,hemidemisemiquaver ~> ped "[0 1!15]"
      ] |* vel p2 #ch 15
        |+ humanise 0.1
        |* vel (slow 16 $ lfo saw 0.3 0.9)
        -- |- note 12
        |+| prog 4 (fst motion
         -- +| "[0 4 9 4]*32"
         -- +| "[4 0]!8 [5 0]!4 [4 <2 0>]!4"
         +| "[0 9]*32"
          ) |+ note (snd motion)
      -- >> silence

p16 p0 p1 p2 = d16 $ do
  let (motion, prog) = (snd p0, inKey p1)
  id $
    -- within (0.1,1) degrade $
    -- sometimes ((|+ note 12) . rev) $
    stack [silence
      ,phrase 2 "mp"
      ,hemidemisemiquaver ~> ped "[0 1!31]"
      ] |* vel p2 #ch 16
        |+ humanise 0.1
        |- note 12
        |+| prog 4 (fst motion
        |+  "[[0,9,4] [2,11,7] [-3,7,2] [0,9,4]]*4"
         -- +| "[[0,4] 2 4 7]*16"
         -- +| "[0 . 7 <9 [11 21]>]*8"
          ) |+ note (snd motion)
            -- |+ legato 0.4
            |+ vel "0.2"
      -- >> silence

hush
