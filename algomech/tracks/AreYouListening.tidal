runWith andante

p05 p0 p1 = d05 $ do
  let (_,_,struc) = p0
  let p =
        [harmonics 1 "~ e1 . ~ g1 ~ e2 . ~ g1 . ~ e1 ~ b1"
        ,harmonics 1 "~ e1 . ~ g1 ~ e2 . ~ g1 . ~ e1 ~ b1"
        ,harmonics 1 "~ e2 . ~ g1 ~ b1 . ~ e2 . ~ g1 ~ b1"
        ]
  id $
    trunc 0.77 $
    stack [silence
      ,cat [p!!1,p!!1,p!!struc,p!!struc]
      ,sus "[[1 0] 1 [1 0] 1]"
      ,lever 0
      ,finetune 0
      ,transpose "-2"
      ,atk 0.0
      ,verb 0.5
      ,echo 0.2
      ] |= vel p1

p08 p0 p1 p2 = d08 $ do
  let (motion, prog) = (snd' p0, inKey p1)
  id $
    trunc 0.75 $
    stack [silence
      ,phrase 1 "mp"
      ,modwheel 0.0
      ] |* vel p2 #ch 08
        -- |+ note 12
        |+| prog 4 (fst motion
         -- +| "[<0 4 -2 -1> ~]*16"
         +| "[0]*64"
         -- +| "[0]*32"
         -- +| "[0 ~]*16"
        -- |+ "[7]*16"
          ) |+ note (snd motion)
      -- >> silence

p09 p0 = d09 $ do
  id $
    stack [silence
      ,ruismk minim "[~ sn]"
      ,ruismk crotchet "sb"
      ,ruismk 1 "hats"
      ] |= ch 09
        |* vel p0
        -- >> silence

p10 p0 = d10 $ do
  id $
    trunc 0.77 $
    stack [silence
      -- ,hats 1 "16" #vel (fast 4 $ crotchet ~> lfo sine 0.3 0.54)
      ,hats 1 "8" #vel (fast 4 $ crotchet ~> lfo sine 0.3 0.54)
      ,kit 1 "[bd:echo bd:lead]" #vel 0.8
      ,kit 1 "~ [~!2 bd? ss] [~ bd] ss" #vel 0.6
      ,kit minim "[~ <rm:echos rm:leads>]" #vel 0.7
      ,degrade $ kit minim "ss(3,8)" #vel 0.3
      -- ,degrade $ kit 1 "sn(3,8)" #vel 0.3
      -- ,cymbals crotchet "~ rd" #vel 0.6
      ] |= ch 10
        -- |* vel "1.1 0.9!15"
        |* vel p0
        |+ vel 0.2
        |+ humanise 0.2
        -- >> silence

p11 p0 p1 p2 = d11 $ do
  let (motion, prog) = (fst' p0, inKey p1)
  id $
    stack [silence
      ,phrase 1 "x"
      -- ,modwheel (slow 8 $ lfo tri 0.3 0.6)
      ,modwheel 0.7
      ] |* vel p2 #ch 11
        |+ note 24
        |+| prog 1 (fst motion
         +| "[0 2 2 [1 0] . 0 ~]/2"
         -- +| "[[2 <0 -1>]*4 [0 2 0 1]]/2"
          ) |+ note (snd motion)
        -- >> silence

p12 p0 p1 p2 = d12 $ do
  let (motion, prog) = (fst' p0, inKey p1)
  id $
    stack [silence
      ,phrase 1 "mp"
      ,modwheel (slow 16 $ lfo sine 0 0.7)
      -- ,modwheel 0.0
      ,dPluck
      ] |* vel p2 #ch 12
        -- |+ vel 0.8
        |+ humanise 0.1
        |= legato 0.4
        -- |- note 12
        -- |+ note 12
        |+| prog 4 (fst motion
         -- +| "[0 2 -2 -3]*16"
         +| "[0 . 3 4]*16"
         -- +| "[~ 0]*16"
         -- +| "[0 9 11 7]*16"
          ) |+ note (snd motion)
      -- >> silence

p12 p0 p1 p2 = d12 $ do
  let (motion, prog) = (snd' p0, inKey p1)
  let lfo1 = slow 5 $ 0.5 <~ lfo sine 0.01 0.11
  id $
    stack [silence
      ,dOcean
        (lfo sine 0.3 0.4) -- 0.62 -- cutoff
        0.4 -- res
        (2 <~ lfo1*2) -- contour
        (lfo1 *1) -- osc2&3
        0 -- oscmod
        (lfo1*1) -- lfo
      ,phrase 1 "mp"
      ] |* vel p2 #ch 12
        -- |+ note 12
        -- |+ note 12
        |+| prog 4 (fst motion
         -- +| "[0 0 . <-5 -3 0 <-5 0>>]*4"
         +| "[0 2 2 [1 0] . 0 ~]/2"
         -- +| "[0 <2 4 [5 3] 0>]*4"
         -- +| "0*16"
          ) |+ note (snd motion)
          -- >> silence

p13 p0 p1 p2 = d13 $ do
  let (motion, prog) = (fst' p0, inKey p1)
  id $
      stack [silence
      ,phrase 1 "mp"
      ,blend 0.8
      ] |* vel p2 #ch 13
        |- note 24
        |+| prog 4 (fst motion
         +| "[0 0 . <-5 -3 0 <-5 0>>]*4"
         +| "[0 2]*16"
         -- +| "[7 2 4 2]*16"
         +| "0*32"
          ) |+ note (snd motion)

hush
